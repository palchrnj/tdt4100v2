test inheritance.SavingsAccount

instance SavingsAccount savingsAccount = new SavingsAccount(0.10)
	
sequence balanceField {
	
	--
	savingsAccount.deposit(100.0)
	-->
	state {
		savingsAccount.getBalance() == 100.0
	}
}

sequence depositAndWithdraw {
	--
	savingsAccount.deposit(100.0), savingsAccount.withdraw(40.0)
	-->
	state {
		savingsAccount.getBalance() == 60.0
	}
}

sequence depositAndWithdrawIllegalStateOrInput {
	--
	savingsAccount.deposit(10.0), savingsAccount.deposit(-100.0) throws IllegalArgumentException
	-->
	state {
		savingsAccount.getBalance() == 10.0
	}
	
	--
	savingsAccount.deposit(10.0), savingsAccount.withdraw(-100.0) throws IllegalArgumentException
	-->
	state {
		savingsAccount.getBalance() == 20.0
	}
	
	--
	savingsAccount.deposit(10.0), savingsAccount.withdraw(40.0) throws IllegalStateException
	-->
	state {
		savingsAccount.getBalance() == 30.0
	}
}

sequence endYearUpdate{
	--
	savingsAccount.deposit(100.0), savingsAccount.endYearUpdate()
	-->
	state {
		savingsAccount.getBalance() == 100.0 * (1 + 0.10)
	}
}

method boolean ==(double n1, double n2) {
	val epsilon = 0.0000001 // avrundingsfeil
	n1 - epsilon <= n2 && n1 + epsilon >= n2
}